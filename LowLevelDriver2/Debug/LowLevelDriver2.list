
LowLevelDriver2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cac  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001e70  08001e70  00011e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e98  08001e98  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08001e98  08001e98  00011e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ea0  08001ea0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ea0  08001ea0  00011ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ea4  08001ea4  00011ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001eac  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001eac  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004356  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fcd  00000000  00000000  000243cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000680  00000000  00000000  000253a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004c6  00000000  00000000  00025a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf35  00000000  00000000  00025ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000048e9  00000000  00000000  00041e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eceb  00000000  00000000  00046704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a50  00000000  00000000  000e53f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000e6e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001e58 	.word	0x08001e58

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08001e58 	.word	0x08001e58

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f003 0307 	and.w	r3, r3, #7
 800050e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <__NVIC_SetPriorityGrouping+0x44>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800051c:	4013      	ands	r3, r2
 800051e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800052c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000532:	4a04      	ldr	r2, [pc, #16]	; (8000544 <__NVIC_SetPriorityGrouping+0x44>)
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	60d3      	str	r3, [r2, #12]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <__NVIC_GetPriorityGrouping+0x18>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	0a1b      	lsrs	r3, r3, #8
 8000552:	f003 0307 	and.w	r3, r3, #7
}
 8000556:	4618      	mov	r0, r3
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	db0b      	blt.n	800058e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f003 021f 	and.w	r2, r3, #31
 800057c:	4907      	ldr	r1, [pc, #28]	; (800059c <__NVIC_EnableIRQ+0x38>)
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	095b      	lsrs	r3, r3, #5
 8000584:	2001      	movs	r0, #1
 8000586:	fa00 f202 	lsl.w	r2, r0, r2
 800058a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000e100 	.word	0xe000e100

080005a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db0a      	blt.n	80005ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	490c      	ldr	r1, [pc, #48]	; (80005ec <__NVIC_SetPriority+0x4c>)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	0112      	lsls	r2, r2, #4
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	440b      	add	r3, r1
 80005c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005c8:	e00a      	b.n	80005e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4908      	ldr	r1, [pc, #32]	; (80005f0 <__NVIC_SetPriority+0x50>)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	f003 030f 	and.w	r3, r3, #15
 80005d6:	3b04      	subs	r3, #4
 80005d8:	0112      	lsls	r2, r2, #4
 80005da:	b2d2      	uxtb	r2, r2
 80005dc:	440b      	add	r3, r1
 80005de:	761a      	strb	r2, [r3, #24]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000e100 	.word	0xe000e100
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b089      	sub	sp, #36	; 0x24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	f1c3 0307 	rsb	r3, r3, #7
 800060e:	2b04      	cmp	r3, #4
 8000610:	bf28      	it	cs
 8000612:	2304      	movcs	r3, #4
 8000614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	3304      	adds	r3, #4
 800061a:	2b06      	cmp	r3, #6
 800061c:	d902      	bls.n	8000624 <NVIC_EncodePriority+0x30>
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	3b03      	subs	r3, #3
 8000622:	e000      	b.n	8000626 <NVIC_EncodePriority+0x32>
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	f04f 32ff 	mov.w	r2, #4294967295
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	43da      	mvns	r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	401a      	ands	r2, r3
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800063c:	f04f 31ff 	mov.w	r1, #4294967295
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	43d9      	mvns	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	4313      	orrs	r3, r2
         );
}
 800064e:	4618      	mov	r0, r3
 8000650:	3724      	adds	r7, #36	; 0x24
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
	...

0800065c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <LL_RCC_HSI_Enable+0x1c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <LL_RCC_HSI_Enable+0x1c>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <LL_RCC_HSI_IsReady+0x20>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f003 0302 	and.w	r3, r3, #2
 8000688:	2b02      	cmp	r3, #2
 800068a:	bf0c      	ite	eq
 800068c:	2301      	moveq	r3, #1
 800068e:	2300      	movne	r3, #0
 8000690:	b2db      	uxtb	r3, r3
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	40023800 	.word	0x40023800

080006a0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	4904      	ldr	r1, [pc, #16]	; (80006c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80006b6:	4313      	orrs	r3, r2
 80006b8:	600b      	str	r3, [r1, #0]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <LL_RCC_SetSysClkSource+0x24>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f023 0203 	bic.w	r2, r3, #3
 80006dc:	4904      	ldr	r1, [pc, #16]	; (80006f0 <LL_RCC_SetSysClkSource+0x24>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	608b      	str	r3, [r1, #8]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40023800 	.word	0x40023800

080006f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <LL_RCC_GetSysClkSource+0x18>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	f003 030c 	and.w	r3, r3, #12
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <LL_RCC_SetAHBPrescaler+0x24>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000720:	4904      	ldr	r1, [pc, #16]	; (8000734 <LL_RCC_SetAHBPrescaler+0x24>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	608b      	str	r3, [r1, #8]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	40023800 	.word	0x40023800

08000738 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000748:	4904      	ldr	r1, [pc, #16]	; (800075c <LL_RCC_SetAPB1Prescaler+0x24>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	608b      	str	r3, [r1, #8]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	40023800 	.word	0x40023800

08000760 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <LL_RCC_SetAPB2Prescaler+0x24>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000770:	4904      	ldr	r1, [pc, #16]	; (8000784 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4313      	orrs	r3, r2
 8000776:	608b      	str	r3, [r1, #8]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	40023800 	.word	0x40023800

08000788 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <LL_RCC_SetTIMPrescaler+0x28>)
 8000792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000796:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800079a:	4905      	ldr	r1, [pc, #20]	; (80007b0 <LL_RCC_SetTIMPrescaler+0x28>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4313      	orrs	r3, r2
 80007a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	40023800 	.word	0x40023800

080007b4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <LL_RCC_PLL_Enable+0x1c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <LL_RCC_PLL_Enable+0x1c>)
 80007be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <LL_RCC_PLL_IsReady+0x24>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007e4:	bf0c      	ite	eq
 80007e6:	2301      	moveq	r3, #1
 80007e8:	2300      	movne	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800080c:	685a      	ldr	r2, [r3, #4]
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 8000810:	4013      	ands	r3, r2
 8000812:	68f9      	ldr	r1, [r7, #12]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	4311      	orrs	r1, r2
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	0192      	lsls	r2, r2, #6
 800081c:	430a      	orrs	r2, r1
 800081e:	490c      	ldr	r1, [pc, #48]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000820:	4313      	orrs	r3, r2
 8000822:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800082c:	4908      	ldr	r1, [pc, #32]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	4313      	orrs	r3, r2
 8000832:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800083c:	4904      	ldr	r1, [pc, #16]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	4313      	orrs	r3, r2
 8000842:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	40023800 	.word	0x40023800
 8000854:	ffbf8000 	.word	0xffbf8000

08000858 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000864:	4907      	ldr	r1, [pc, #28]	; (8000884 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4313      	orrs	r3, r2
 800086a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800086e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4013      	ands	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	40023800 	.word	0x40023800

08000888 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000894:	4907      	ldr	r1, [pc, #28]	; (80008b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4313      	orrs	r3, r2
 800089a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800089e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4013      	ands	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40023800 	.word	0x40023800

080008b8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008c4:	4907      	ldr	r1, [pc, #28]	; (80008e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4013      	ands	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	40023800 	.word	0x40023800

080008e8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80008f2:	4a13      	ldr	r2, [pc, #76]	; (8000940 <LL_SYSCFG_SetEXTISource+0x58>)
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	3302      	adds	r3, #2
 80008fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	0c1b      	lsrs	r3, r3, #16
 8000902:	43db      	mvns	r3, r3
 8000904:	ea02 0103 	and.w	r1, r2, r3
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	0c1b      	lsrs	r3, r3, #16
 800090c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	fa93 f3a3 	rbit	r3, r3
 8000914:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	fab3 f383 	clz	r3, r3
 800091c:	b2db      	uxtb	r3, r3
 800091e:	461a      	mov	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	fa03 f202 	lsl.w	r2, r3, r2
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <LL_SYSCFG_SetEXTISource+0x58>)
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	430a      	orrs	r2, r1
 800092e:	3302      	adds	r3, #2
 8000930:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	40013800 	.word	0x40013800

08000944 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <LL_FLASH_SetLatency+0x24>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f023 020f 	bic.w	r2, r3, #15
 8000954:	4904      	ldr	r1, [pc, #16]	; (8000968 <LL_FLASH_SetLatency+0x24>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4313      	orrs	r3, r2
 800095a:	600b      	str	r3, [r1, #0]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	40023c00 	.word	0x40023c00

0800096c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <LL_FLASH_GetLatency+0x18>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 030f 	and.w	r3, r3, #15
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023c00 	.word	0x40023c00

08000988 <LL_PWR_DisableOverDriveMode>:
  * @brief  Disable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_DisableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableOverDriveMode(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <LL_PWR_DisableOverDriveMode+0x1c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <LL_PWR_DisableOverDriveMode+0x1c>)
 8000992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40007000 	.word	0x40007000

080009a8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80009b8:	4904      	ldr	r1, [pc, #16]	; (80009cc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4313      	orrs	r3, r2
 80009be:	600b      	str	r3, [r1, #0]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	40007000 	.word	0x40007000

080009d0 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009e0:	bf0c      	ite	eq
 80009e2:	2301      	moveq	r3, #1
 80009e4:	2300      	movne	r3, #0
 80009e6:	b2db      	uxtb	r3, r3
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40007000 	.word	0x40007000

080009f8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	60da      	str	r2, [r3, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	615a      	str	r2, [r3, #20]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa93 f3a3 	rbit	r3, r3
 8000a5e:	613b      	str	r3, [r7, #16]
  return result;
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	fab3 f383 	clz	r3, r3
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	2103      	movs	r1, #3
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	401a      	ands	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	fa93 f3a3 	rbit	r3, r3
 8000a7e:	61bb      	str	r3, [r7, #24]
  return result;
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fab3 f383 	clz	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	431a      	orrs	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	601a      	str	r2, [r3, #0]
}
 8000a96:	bf00      	nop
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b089      	sub	sp, #36	; 0x24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	68da      	ldr	r2, [r3, #12]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	fa93 f3a3 	rbit	r3, r3
 8000abc:	613b      	str	r3, [r7, #16]
  return result;
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	fab3 f383 	clz	r3, r3
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	2103      	movs	r1, #3
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	401a      	ands	r2, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	fa93 f3a3 	rbit	r3, r3
 8000adc:	61bb      	str	r3, [r7, #24]
  return result;
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	fab3 f383 	clz	r3, r3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	431a      	orrs	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	60da      	str	r2, [r3, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3724      	adds	r7, #36	; 0x24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	041a      	lsls	r2, r3, #16
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	619a      	str	r2, [r3, #24]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <UART2_send>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// sends character into the Tx register
void UART2_send(char c) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	// USART2->SR contains flags of the USART peripheral (contains USART_SR_TXE)
	// USART_SR_TXE if a bit mask that is set when the transmit data register is empty
	// when ANDed together, it checks if the bit mask is set
    while (!(USART2->SR & USART_SR_TXE));  // Wait until TX is empty
 8000b2a:	bf00      	nop
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <UART2_send+0x2c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0f9      	beq.n	8000b2c <UART2_send+0xc>
    USART2->DR = c;  // Load data into transmit register
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <UART2_send+0x2c>)
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	6053      	str	r3, [r2, #4]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40004400 	.word	0x40004400

08000b50 <UART2_string>:

// parses inputted string into characters for the send function
void UART2_string(char *str) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000b58:	e006      	b.n	8000b68 <UART2_string+0x18>
        UART2_send(*str++);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ffdc 	bl	8000b20 <UART2_send>
    while (*str) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1f4      	bne.n	8000b5a <UART2_string+0xa>
    }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000b82:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b86:	f7ff fe97 	bl	80008b8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b8a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000b8e:	f7ff fe7b 	bl	8000888 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b92:	2007      	movs	r0, #7
 8000b94:	f7ff fcb4 	bl	8000500 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b98:	f000 f854 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9c:	f000 f8f4 	bl	8000d88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ba0:	f000 f8a2 	bl	8000ce8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Step 1: Enable GPIOA clock (RCC_AHB1ENR register)
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <main+0xb4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <main+0xb4>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30

  // Step 2: Configure PA5 as output (MODER register)
  GPIOA->MODER &= ~(0x3 << (5 * 2));  // Clear bits for PA5
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <main+0xb8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1f      	ldr	r2, [pc, #124]	; (8000c34 <main+0xb8>)
 8000bb6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000bba:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (0x1 << (5 * 2));   // Set PA5 to output mode
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <main+0xb8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <main+0xb8>)
 8000bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc6:	6013      	str	r3, [r2, #0]


  RCC->APB1ENR |= RCC_APB1ENR_USART2EN;  // Enable USART2 clock
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <main+0xb4>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <main+0xb4>)
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40

  // 2️⃣ Configure PA2 (TX) and PA3 (RX) as Alternate Function Mode
  GPIOA->MODER &= ~((3U << (2 * 2)) | (3U << (3 * 2)));  // Clear bits
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <main+0xb8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a16      	ldr	r2, [pc, #88]	; (8000c34 <main+0xb8>)
 8000bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bde:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |=  (2U << (2 * 2)) | (2U << (3 * 2));    // Set to Alternate Function (AF)
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <main+0xb8>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <main+0xb8>)
 8000be6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000bea:	6013      	str	r3, [r2, #0]

  // 3️⃣ Set Alternate Function to AF7 (USART2) for PA2 and PA3
  GPIOA->AFR[0] |= (7U << (2 * 4)) | (7U << (3 * 4));   // AF7 for PA2, PA3
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <main+0xb8>)
 8000bee:	6a1b      	ldr	r3, [r3, #32]
 8000bf0:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <main+0xb8>)
 8000bf2:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000bf6:	6213      	str	r3, [r2, #32]

  // 4️⃣ Configure USART2: 115200 baud, 8N1 format
  USART2->BRR = 0x0164;   // Baud rate = 115200 (assuming 16 MHz system clock)
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <main+0xbc>)
 8000bfa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8000bfe:	609a      	str	r2, [r3, #8]
  USART2->CR1 = USART_CR1_TE | USART_CR1_RE; // Enable TX & RX
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <main+0xbc>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	60da      	str	r2, [r3, #12]
  USART2->CR1 |= USART_CR1_UE;  // Enable USART2
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <main+0xbc>)
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <main+0xbc>)
 8000c0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c10:	60d3      	str	r3, [r2, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  UART2_string("Hello, World!\r\n");	// send message
 8000c12:	480a      	ldr	r0, [pc, #40]	; (8000c3c <main+0xc0>)
 8000c14:	f7ff ff9c 	bl	8000b50 <UART2_string>
	  // must use volatile when accessing memory-mapped I/O registers like (UART hardware registers)
	  for (volatile int i = 0; i < 10000000; i++);  // Simple delay
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	e002      	b.n	8000c24 <main+0xa8>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3301      	adds	r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <main+0xc4>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	dbf8      	blt.n	8000c1e <main+0xa2>
	  UART2_string("Hello, World!\r\n");	// send message
 8000c2c:	e7f1      	b.n	8000c12 <main+0x96>
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	08001e70 	.word	0x08001e70
 8000c40:	00989680 	.word	0x00989680

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f7ff fe7b 	bl	8000944 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000c4e:	bf00      	nop
 8000c50:	f7ff fe8c 	bl	800096c <LL_FLASH_GetLatency>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d1fa      	bne.n	8000c50 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 8000c5a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c5e:	f7ff fea3 	bl	80009a8 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_DisableOverDriveMode();
 8000c62:	f7ff fe91 	bl	8000988 <LL_PWR_DisableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000c66:	2010      	movs	r0, #16
 8000c68:	f7ff fd1a 	bl	80006a0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000c6c:	f7ff fcf6 	bl	800065c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000c70:	bf00      	nop
 8000c72:	f7ff fd03 	bl	800067c <LL_RCC_HSI_IsReady>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d1fa      	bne.n	8000c72 <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8000c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c80:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000c84:	2110      	movs	r1, #16
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff fdb8 	bl	80007fc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000c8c:	f7ff fd92 	bl	80007b4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000c90:	bf00      	nop
 8000c92:	f7ff fd9f 	bl	80007d4 <LL_RCC_PLL_IsReady>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d1fa      	bne.n	8000c92 <SystemClock_Config+0x4e>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000c9c:	bf00      	nop
 8000c9e:	f7ff fe97 	bl	80009d0 <LL_PWR_IsActiveFlag_VOS>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0fa      	beq.n	8000c9e <SystemClock_Config+0x5a>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fd31 	bl	8000710 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000cae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000cb2:	f7ff fd41 	bl	8000738 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff fd52 	bl	8000760 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f7ff fd05 	bl	80006cc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff fd16 	bl	80006f4 <LL_RCC_GetSysClkSource>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b08      	cmp	r3, #8
 8000ccc:	d1fa      	bne.n	8000cc4 <SystemClock_Config+0x80>
  {

  }
  LL_Init1msTick(84000000);
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <SystemClock_Config+0xa0>)
 8000cd0:	f001 f880 	bl	8001dd4 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8000cd4:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <SystemClock_Config+0xa0>)
 8000cd6:	f001 f88b 	bl	8001df0 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff fd54 	bl	8000788 <LL_RCC_SetTIMPrescaler>
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	0501bd00 	.word	0x0501bd00

08000ce8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08e      	sub	sp, #56	; 0x38
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	615a      	str	r2, [r3, #20]
 8000d00:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000d12:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d16:	f7ff fdb7 	bl	8000888 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff fd9c 	bl	8000858 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d20:	230c      	movs	r3, #12
 8000d22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d24:	2302      	movs	r3, #2
 8000d26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000d34:	2307      	movs	r3, #7
 8000d36:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4810      	ldr	r0, [pc, #64]	; (8000d80 <MX_USART2_UART_Init+0x98>)
 8000d3e:	f000 fb5b 	bl	80013f8 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000d42:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000d46:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d54:	230c      	movs	r3, #12
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	4807      	ldr	r0, [pc, #28]	; (8000d84 <MX_USART2_UART_Init+0x9c>)
 8000d68:	f000 ff9a 	bl	8001ca0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USART2_UART_Init+0x9c>)
 8000d6e:	f7ff fe53 	bl	8000a18 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000d72:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_USART2_UART_Init+0x9c>)
 8000d74:	f7ff fe40 	bl	80009f8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3738      	adds	r7, #56	; 0x38
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40020000 	.word	0x40020000
 8000d84:	40004400 	.word	0x40004400

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
 8000da6:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000da8:	2004      	movs	r0, #4
 8000daa:	f7ff fd55 	bl	8000858 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000dae:	2080      	movs	r0, #128	; 0x80
 8000db0:	f7ff fd52 	bl	8000858 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fd4f 	bl	8000858 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000dba:	2002      	movs	r0, #2
 8000dbc:	f7ff fd4c 	bl	8000858 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	4822      	ldr	r0, [pc, #136]	; (8000e4c <MX_GPIO_Init+0xc4>)
 8000dc4:	f7ff fe9c 	bl	8000b00 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000dc8:	4921      	ldr	r1, [pc, #132]	; (8000e50 <MX_GPIO_Init+0xc8>)
 8000dca:	2002      	movs	r0, #2
 8000dcc:	f7ff fd8c 	bl	80008e8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd4:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000dde:	2302      	movs	r3, #2
 8000de0:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f982 	bl	80010f0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df2:	4818      	ldr	r0, [pc, #96]	; (8000e54 <MX_GPIO_Init+0xcc>)
 8000df4:	f7ff fe55 	bl	8000aa2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfe:	4815      	ldr	r0, [pc, #84]	; (8000e54 <MX_GPIO_Init+0xcc>)
 8000e00:	f7ff fe20 	bl	8000a44 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e04:	2320      	movs	r3, #32
 8000e06:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <MX_GPIO_Init+0xc4>)
 8000e1e:	f000 faeb 	bl	80013f8 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e22:	f7ff fb91 	bl	8000548 <__NVIC_GetPriorityGrouping>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fbe1 	bl	80005f4 <NVIC_EncodePriority>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4619      	mov	r1, r3
 8000e36:	2028      	movs	r0, #40	; 0x28
 8000e38:	f7ff fbb2 	bl	80005a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e3c:	2028      	movs	r0, #40	; 0x28
 8000e3e:	f7ff fb91 	bl	8000564 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e42:	bf00      	nop
 8000e44:	3720      	adds	r7, #32
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	00f00003 	.word	0x00f00003
 8000e54:	40020800 	.word	0x40020800

08000e58 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000e62:	695a      	ldr	r2, [r3, #20]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4013      	ands	r3, r2
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	bf0c      	ite	eq
 8000e6e:	2301      	moveq	r3, #1
 8000e70:	2300      	movne	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	40013c00 	.word	0x40013c00

08000e84 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6153      	str	r3, [r2, #20]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40013c00 	.word	0x40013c00

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <NMI_Handler+0x4>

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
    if (EXTI->PR & (1 << 13)) {  // Check if EXTI13 triggered (e.g., user button)
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <EXTI15_10_IRQHandler+0x44>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <EXTI15_10_IRQHandler+0x28>
        GPIOA->ODR ^= (1 << 5);  // Toggle PA5 (LED)
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <EXTI15_10_IRQHandler+0x48>)
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <EXTI15_10_IRQHandler+0x48>)
 8000f12:	f083 0320 	eor.w	r3, r3, #32
 8000f16:	6153      	str	r3, [r2, #20]
        EXTI->PR |= (1 << 13);   // Clear interrupt flag
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <EXTI15_10_IRQHandler+0x44>)
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <EXTI15_10_IRQHandler+0x44>)
 8000f1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f22:	6153      	str	r3, [r2, #20]
    }
  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8000f24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f28:	f7ff ff96 	bl	8000e58 <LL_EXTI_IsActiveFlag_0_31>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <EXTI15_10_IRQHandler+0x3e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8000f32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f36:	f7ff ffa5 	bl	8000e84 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40013c00 	.word	0x40013c00
 8000f44:	40020000 	.word	0x40020000

08000f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f72:	490e      	ldr	r1, [pc, #56]	; (8000fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f88:	4c0b      	ldr	r4, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f96:	f7ff ffd7 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f000 ff39 	bl	8001e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9e:	f7ff fded 	bl	8000b7c <main>
  bx  lr    
 8000fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000fb0:	08001ea8 	.word	0x08001ea8
  ldr r2, =_sbss
 8000fb4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000fb8:	20000020 	.word	0x20000020

08000fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC_IRQHandler>
	...

08000fc0 <LL_EXTI_EnableIT_0_31>:
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <LL_EXTI_EnableIT_0_31+0x20>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4904      	ldr	r1, [pc, #16]	; (8000fe0 <LL_EXTI_EnableIT_0_31+0x20>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	600b      	str	r3, [r1, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40013c00 	.word	0x40013c00

08000fe4 <LL_EXTI_DisableIT_0_31>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <LL_EXTI_DisableIT_0_31+0x24>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	4904      	ldr	r1, [pc, #16]	; (8001008 <LL_EXTI_DisableIT_0_31+0x24>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40013c00 	.word	0x40013c00

0800100c <LL_EXTI_EnableEvent_0_31>:
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <LL_EXTI_EnableEvent_0_31+0x20>)
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	4904      	ldr	r1, [pc, #16]	; (800102c <LL_EXTI_EnableEvent_0_31+0x20>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40013c00 	.word	0x40013c00

08001030 <LL_EXTI_DisableEvent_0_31>:
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <LL_EXTI_DisableEvent_0_31+0x24>)
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	43db      	mvns	r3, r3
 8001040:	4904      	ldr	r1, [pc, #16]	; (8001054 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001042:	4013      	ands	r3, r2
 8001044:	604b      	str	r3, [r1, #4]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40013c00 	.word	0x40013c00

08001058 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	4904      	ldr	r1, [pc, #16]	; (8001078 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4313      	orrs	r3, r2
 800106a:	608b      	str	r3, [r1, #8]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40013c00 	.word	0x40013c00

0800107c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	43db      	mvns	r3, r3
 800108c:	4904      	ldr	r1, [pc, #16]	; (80010a0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800108e:	4013      	ands	r3, r2
 8001090:	608b      	str	r3, [r1, #8]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40013c00 	.word	0x40013c00

080010a4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	4904      	ldr	r1, [pc, #16]	; (80010c4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60cb      	str	r3, [r1, #12]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	4904      	ldr	r1, [pc, #16]	; (80010ec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80010da:	4013      	ands	r3, r2
 80010dc:	60cb      	str	r3, [r1, #12]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40013c00 	.word	0x40013c00

080010f0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	791b      	ldrb	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d065      	beq.n	80011d0 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d06b      	beq.n	80011e4 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	795b      	ldrb	r3, [r3, #5]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d01c      	beq.n	800114e <LL_EXTI_Init+0x5e>
 8001114:	2b02      	cmp	r3, #2
 8001116:	dc25      	bgt.n	8001164 <LL_EXTI_Init+0x74>
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <LL_EXTI_Init+0x32>
 800111c:	2b01      	cmp	r3, #1
 800111e:	d00b      	beq.n	8001138 <LL_EXTI_Init+0x48>
 8001120:	e020      	b.n	8001164 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff82 	bl	8001030 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff45 	bl	8000fc0 <LL_EXTI_EnableIT_0_31>
          break;
 8001136:	e018      	b.n	800116a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff51 	bl	8000fe4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff60 	bl	800100c <LL_EXTI_EnableEvent_0_31>
          break;
 800114c:	e00d      	b.n	800116a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff34 	bl	8000fc0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff55 	bl	800100c <LL_EXTI_EnableEvent_0_31>
          break;
 8001162:	e002      	b.n	800116a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
          break;
 8001168:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	799b      	ldrb	r3, [r3, #6]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d038      	beq.n	80011e4 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	799b      	ldrb	r3, [r3, #6]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d01c      	beq.n	80011b4 <LL_EXTI_Init+0xc4>
 800117a:	2b03      	cmp	r3, #3
 800117c:	dc25      	bgt.n	80011ca <LL_EXTI_Init+0xda>
 800117e:	2b01      	cmp	r3, #1
 8001180:	d002      	beq.n	8001188 <LL_EXTI_Init+0x98>
 8001182:	2b02      	cmp	r3, #2
 8001184:	d00b      	beq.n	800119e <LL_EXTI_Init+0xae>
 8001186:	e020      	b.n	80011ca <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff9b 	bl	80010c8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff5e 	bl	8001058 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800119c:	e022      	b.n	80011e4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff6a 	bl	800107c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff79 	bl	80010a4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80011b2:	e017      	b.n	80011e4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff4d 	bl	8001058 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff6e 	bl	80010a4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80011c8:	e00c      	b.n	80011e4 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
            break;
 80011ce:	e009      	b.n	80011e4 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff05 	bl	8000fe4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff26 	bl	8001030 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <LL_GPIO_SetPinMode>:
{
 80011ee:	b480      	push	{r7}
 80011f0:	b089      	sub	sp, #36	; 0x24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	613b      	str	r3, [r7, #16]
  return result;
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	fab3 f383 	clz	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2103      	movs	r1, #3
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	401a      	ands	r2, r3
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	61bb      	str	r3, [r7, #24]
  return result;
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	fab3 f383 	clz	r3, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	431a      	orrs	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	3724      	adds	r7, #36	; 0x24
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_GPIO_SetPinOutputType>:
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	43db      	mvns	r3, r3
 8001260:	401a      	ands	r2, r3
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	fb01 f303 	mul.w	r3, r1, r3
 800126a:	431a      	orrs	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	605a      	str	r2, [r3, #4]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_GPIO_SetPinSpeed>:
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa93 f3a3 	rbit	r3, r3
 8001296:	613b      	str	r3, [r7, #16]
  return result;
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2103      	movs	r1, #3
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	fa93 f3a3 	rbit	r3, r3
 80012b6:	61bb      	str	r3, [r7, #24]
  return result;
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fab3 f383 	clz	r3, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	fa01 f303 	lsl.w	r3, r1, r3
 80012c8:	431a      	orrs	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	609a      	str	r2, [r3, #8]
}
 80012ce:	bf00      	nop
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_GPIO_SetPinPull>:
{
 80012da:	b480      	push	{r7}
 80012dc:	b089      	sub	sp, #36	; 0x24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	fa93 f3a3 	rbit	r3, r3
 80012f4:	613b      	str	r3, [r7, #16]
  return result;
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	fab3 f383 	clz	r3, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2103      	movs	r1, #3
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	401a      	ands	r2, r3
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa93 f3a3 	rbit	r3, r3
 8001314:	61bb      	str	r3, [r7, #24]
  return result;
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	fab3 f383 	clz	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	431a      	orrs	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	60da      	str	r2, [r3, #12]
}
 800132c:	bf00      	nop
 800132e:	3724      	adds	r7, #36	; 0x24
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_GPIO_SetAFPin_0_7>:
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a1a      	ldr	r2, [r3, #32]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	613b      	str	r3, [r7, #16]
  return result;
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	210f      	movs	r1, #15
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	401a      	ands	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	61bb      	str	r3, [r7, #24]
  return result;
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fab3 f383 	clz	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	431a      	orrs	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	621a      	str	r2, [r3, #32]
}
 800138a:	bf00      	nop
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_GPIO_SetAFPin_8_15>:
{
 8001396:	b480      	push	{r7}
 8001398:	b089      	sub	sp, #36	; 0x24
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	613b      	str	r3, [r7, #16]
  return result;
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	fab3 f383 	clz	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	210f      	movs	r1, #15
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	401a      	ands	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	0a1b      	lsrs	r3, r3, #8
 80013cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	61bb      	str	r3, [r7, #24]
  return result;
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	fab3 f383 	clz	r3, r3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	431a      	orrs	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013ec:	bf00      	nop
 80013ee:	3724      	adds	r7, #36	; 0x24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	613b      	str	r3, [r7, #16]
  return result;
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	fab3 f383 	clz	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001422:	e050      	b.n	80014c6 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d042      	beq.n	80014c0 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d003      	beq.n	800144a <LL_GPIO_Init+0x52>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d10d      	bne.n	8001466 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	461a      	mov	r2, r3
 8001450:	69b9      	ldr	r1, [r7, #24]
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff12 	bl	800127c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	461a      	mov	r2, r3
 800145e:	69b9      	ldr	r1, [r7, #24]
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fef3 	bl	800124c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	461a      	mov	r2, r3
 800146c:	69b9      	ldr	r1, [r7, #24]
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff33 	bl	80012da <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d11a      	bne.n	80014b2 <LL_GPIO_Init+0xba>
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	60bb      	str	r3, [r7, #8]
  return result;
 8001488:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b07      	cmp	r3, #7
 8001492:	d807      	bhi.n	80014a4 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	461a      	mov	r2, r3
 800149a:	69b9      	ldr	r1, [r7, #24]
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff4b 	bl	8001338 <LL_GPIO_SetAFPin_0_7>
 80014a2:	e006      	b.n	80014b2 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	461a      	mov	r2, r3
 80014aa:	69b9      	ldr	r1, [r7, #24]
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff72 	bl	8001396 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	461a      	mov	r2, r3
 80014b8:	69b9      	ldr	r1, [r7, #24]
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fe97 	bl	80011ee <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	3301      	adds	r3, #1
 80014c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1a7      	bne.n	8001424 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <LL_RCC_GetSysClkSource>:
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <LL_RCC_GetSysClkSource+0x18>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 030c 	and.w	r3, r3, #12
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800

080014fc <LL_RCC_GetAHBPrescaler>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <LL_RCC_GetAHBPrescaler+0x18>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800

08001518 <LL_RCC_GetAPB1Prescaler>:
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <LL_RCC_GetAPB1Prescaler+0x18>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <LL_RCC_GetAPB2Prescaler>:
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <LL_RCC_GetAPB2Prescaler+0x18>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800

08001550 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <LL_RCC_PLL_GetMainSource+0x18>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <LL_RCC_PLL_GetN+0x18>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40023800 	.word	0x40023800

08001588 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <LL_RCC_PLL_GetP+0x18>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800

080015a4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <LL_RCC_PLL_GetR+0x18>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800

080015c0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <LL_RCC_PLL_GetDivider+0x18>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800

080015dc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80015e4:	f000 f820 	bl	8001628 <RCC_GetSystemClockFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f85c 	bl	80016b0 <RCC_GetHCLKClockFreq>
 80015f8:	4602      	mov	r2, r0
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f86a 	bl	80016dc <RCC_GetPCLK1ClockFreq>
 8001608:	4602      	mov	r2, r0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f876 	bl	8001704 <RCC_GetPCLK2ClockFreq>
 8001618:	4602      	mov	r2, r0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60da      	str	r2, [r3, #12]
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001632:	f7ff ff55 	bl	80014e0 <LL_RCC_GetSysClkSource>
 8001636:	4603      	mov	r3, r0
 8001638:	2b0c      	cmp	r3, #12
 800163a:	d82d      	bhi.n	8001698 <RCC_GetSystemClockFreq+0x70>
 800163c:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <RCC_GetSystemClockFreq+0x1c>)
 800163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001642:	bf00      	nop
 8001644:	08001679 	.word	0x08001679
 8001648:	08001699 	.word	0x08001699
 800164c:	08001699 	.word	0x08001699
 8001650:	08001699 	.word	0x08001699
 8001654:	0800167f 	.word	0x0800167f
 8001658:	08001699 	.word	0x08001699
 800165c:	08001699 	.word	0x08001699
 8001660:	08001699 	.word	0x08001699
 8001664:	08001685 	.word	0x08001685
 8001668:	08001699 	.word	0x08001699
 800166c:	08001699 	.word	0x08001699
 8001670:	08001699 	.word	0x08001699
 8001674:	0800168f 	.word	0x0800168f
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <RCC_GetSystemClockFreq+0x80>)
 800167a:	607b      	str	r3, [r7, #4]
      break;
 800167c:	e00f      	b.n	800169e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <RCC_GetSystemClockFreq+0x84>)
 8001680:	607b      	str	r3, [r7, #4]
      break;
 8001682:	e00c      	b.n	800169e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001684:	2008      	movs	r0, #8
 8001686:	f000 f851 	bl	800172c <RCC_PLL_GetFreqDomain_SYS>
 800168a:	6078      	str	r0, [r7, #4]
      break;
 800168c:	e007      	b.n	800169e <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 800168e:	200c      	movs	r0, #12
 8001690:	f000 f84c 	bl	800172c <RCC_PLL_GetFreqDomain_SYS>
 8001694:	6078      	str	r0, [r7, #4]
      break;
 8001696:	e002      	b.n	800169e <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <RCC_GetSystemClockFreq+0x80>)
 800169a:	607b      	str	r3, [r7, #4]
      break;
 800169c:	bf00      	nop
  }

  return frequency;
 800169e:	687b      	ldr	r3, [r7, #4]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	00f42400 	.word	0x00f42400
 80016ac:	007a1200 	.word	0x007a1200

080016b0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80016b8:	f7ff ff20 	bl	80014fc <LL_RCC_GetAHBPrescaler>
 80016bc:	4603      	mov	r3, r0
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <RCC_GetHCLKClockFreq+0x28>)
 80016c6:	5cd3      	ldrb	r3, [r2, r3]
 80016c8:	461a      	mov	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	40d3      	lsrs	r3, r2
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	08001e80 	.word	0x08001e80

080016dc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80016e4:	f7ff ff18 	bl	8001518 <LL_RCC_GetAPB1Prescaler>
 80016e8:	4603      	mov	r3, r0
 80016ea:	0a9b      	lsrs	r3, r3, #10
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <RCC_GetPCLK1ClockFreq+0x24>)
 80016ee:	5cd3      	ldrb	r3, [r2, r3]
 80016f0:	461a      	mov	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	40d3      	lsrs	r3, r2
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	08001e90 	.word	0x08001e90

08001704 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800170c:	f7ff ff12 	bl	8001534 <LL_RCC_GetAPB2Prescaler>
 8001710:	4603      	mov	r3, r0
 8001712:	0b5b      	lsrs	r3, r3, #13
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <RCC_GetPCLK2ClockFreq+0x24>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	461a      	mov	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	40d3      	lsrs	r3, r2
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	08001e90 	.word	0x08001e90

0800172c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001740:	f7ff ff06 	bl	8001550 <LL_RCC_PLL_GetMainSource>
 8001744:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001752:	d003      	beq.n	800175c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001754:	e005      	b.n	8001762 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8001758:	617b      	str	r3, [r7, #20]
      break;
 800175a:	e005      	b.n	8001768 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 800175e:	617b      	str	r3, [r7, #20]
      break;
 8001760:	e002      	b.n	8001768 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8001764:	617b      	str	r3, [r7, #20]
      break;
 8001766:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b08      	cmp	r3, #8
 800176c:	d114      	bne.n	8001798 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800176e:	f7ff ff27 	bl	80015c0 <LL_RCC_PLL_GetDivider>
 8001772:	4602      	mov	r2, r0
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fbb3 f4f2 	udiv	r4, r3, r2
 800177a:	f7ff fef7 	bl	800156c <LL_RCC_PLL_GetN>
 800177e:	4603      	mov	r3, r0
 8001780:	fb03 f404 	mul.w	r4, r3, r4
 8001784:	f7ff ff00 	bl	8001588 <LL_RCC_PLL_GetP>
 8001788:	4603      	mov	r3, r0
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	3301      	adds	r3, #1
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fbb4 f3f3 	udiv	r3, r4, r3
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	e011      	b.n	80017bc <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001798:	f7ff ff12 	bl	80015c0 <LL_RCC_PLL_GetDivider>
 800179c:	4602      	mov	r2, r0
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fbb3 f4f2 	udiv	r4, r3, r2
 80017a4:	f7ff fee2 	bl	800156c <LL_RCC_PLL_GetN>
 80017a8:	4603      	mov	r3, r0
 80017aa:	fb03 f404 	mul.w	r4, r3, r4
 80017ae:	f7ff fef9 	bl	80015a4 <LL_RCC_PLL_GetR>
 80017b2:	4603      	mov	r3, r0
 80017b4:	0f1b      	lsrs	r3, r3, #28
 80017b6:	fbb4 f3f3 	udiv	r3, r4, r3
 80017ba:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80017bc:	693b      	ldr	r3, [r7, #16]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	00f42400 	.word	0x00f42400
 80017cc:	007a1200 	.word	0x007a1200

080017d0 <LL_USART_IsEnabled>:
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017e4:	bf0c      	ite	eq
 80017e6:	2301      	moveq	r3, #1
 80017e8:	2300      	movne	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_USART_SetStopBitsLength>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_USART_SetHWFlowCtrl>:
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	615a      	str	r2, [r3, #20]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_USART_SetBaudRate>:
{
 8001844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001848:	b0c0      	sub	sp, #256	; 0x100
 800184a:	af00      	add	r7, sp, #0
 800184c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001850:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8001854:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001858:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800185c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001864:	f040 810c 	bne.w	8001a80 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001868:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800186c:	2200      	movs	r2, #0
 800186e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001872:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001876:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800187a:	4622      	mov	r2, r4
 800187c:	462b      	mov	r3, r5
 800187e:	1891      	adds	r1, r2, r2
 8001880:	6639      	str	r1, [r7, #96]	; 0x60
 8001882:	415b      	adcs	r3, r3
 8001884:	667b      	str	r3, [r7, #100]	; 0x64
 8001886:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800188a:	4621      	mov	r1, r4
 800188c:	eb12 0801 	adds.w	r8, r2, r1
 8001890:	4629      	mov	r1, r5
 8001892:	eb43 0901 	adc.w	r9, r3, r1
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018aa:	4690      	mov	r8, r2
 80018ac:	4699      	mov	r9, r3
 80018ae:	4623      	mov	r3, r4
 80018b0:	eb18 0303 	adds.w	r3, r8, r3
 80018b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80018b8:	462b      	mov	r3, r5
 80018ba:	eb49 0303 	adc.w	r3, r9, r3
 80018be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80018c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80018c6:	2200      	movs	r2, #0
 80018c8:	469a      	mov	sl, r3
 80018ca:	4693      	mov	fp, r2
 80018cc:	eb1a 030a 	adds.w	r3, sl, sl
 80018d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80018d2:	eb4b 030b 	adc.w	r3, fp, fp
 80018d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80018e0:	f7fe fc90 	bl	8000204 <__aeabi_uldivmod>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <LL_USART_SetBaudRate+0x238>)
 80018ea:	fba3 2302 	umull	r2, r3, r3, r2
 80018ee:	095b      	lsrs	r3, r3, #5
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	b29c      	uxth	r4, r3
 80018f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80018fa:	2200      	movs	r2, #0
 80018fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001900:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001904:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8001908:	4642      	mov	r2, r8
 800190a:	464b      	mov	r3, r9
 800190c:	1891      	adds	r1, r2, r2
 800190e:	6539      	str	r1, [r7, #80]	; 0x50
 8001910:	415b      	adcs	r3, r3
 8001912:	657b      	str	r3, [r7, #84]	; 0x54
 8001914:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001918:	4641      	mov	r1, r8
 800191a:	1851      	adds	r1, r2, r1
 800191c:	64b9      	str	r1, [r7, #72]	; 0x48
 800191e:	4649      	mov	r1, r9
 8001920:	414b      	adcs	r3, r1
 8001922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8001930:	4659      	mov	r1, fp
 8001932:	00cb      	lsls	r3, r1, #3
 8001934:	4651      	mov	r1, sl
 8001936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800193a:	4651      	mov	r1, sl
 800193c:	00ca      	lsls	r2, r1, #3
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	4603      	mov	r3, r0
 8001944:	4642      	mov	r2, r8
 8001946:	189b      	adds	r3, r3, r2
 8001948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800194c:	464b      	mov	r3, r9
 800194e:	460a      	mov	r2, r1
 8001950:	eb42 0303 	adc.w	r3, r2, r3
 8001954:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001958:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800195c:	2200      	movs	r2, #0
 800195e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001962:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001966:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800196a:	460b      	mov	r3, r1
 800196c:	18db      	adds	r3, r3, r3
 800196e:	643b      	str	r3, [r7, #64]	; 0x40
 8001970:	4613      	mov	r3, r2
 8001972:	eb42 0303 	adc.w	r3, r2, r3
 8001976:	647b      	str	r3, [r7, #68]	; 0x44
 8001978:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800197c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001980:	f7fe fc40 	bl	8000204 <__aeabi_uldivmod>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4611      	mov	r1, r2
 800198a:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <LL_USART_SetBaudRate+0x238>)
 800198c:	fba3 2301 	umull	r2, r3, r3, r1
 8001990:	095b      	lsrs	r3, r3, #5
 8001992:	2264      	movs	r2, #100	; 0x64
 8001994:	fb02 f303 	mul.w	r3, r2, r3
 8001998:	1acb      	subs	r3, r1, r3
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80019a0:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <LL_USART_SetBaudRate+0x238>)
 80019a2:	fba3 2302 	umull	r2, r3, r3, r2
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4423      	add	r3, r4
 80019b6:	b29c      	uxth	r4, r3
 80019b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80019bc:	2200      	movs	r2, #0
 80019be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80019c2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80019c6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80019ca:	4642      	mov	r2, r8
 80019cc:	464b      	mov	r3, r9
 80019ce:	1891      	adds	r1, r2, r2
 80019d0:	63b9      	str	r1, [r7, #56]	; 0x38
 80019d2:	415b      	adcs	r3, r3
 80019d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019da:	4641      	mov	r1, r8
 80019dc:	1851      	adds	r1, r2, r1
 80019de:	6339      	str	r1, [r7, #48]	; 0x30
 80019e0:	4649      	mov	r1, r9
 80019e2:	414b      	adcs	r3, r1
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80019f2:	4659      	mov	r1, fp
 80019f4:	00cb      	lsls	r3, r1, #3
 80019f6:	4651      	mov	r1, sl
 80019f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019fc:	4651      	mov	r1, sl
 80019fe:	00ca      	lsls	r2, r1, #3
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	4603      	mov	r3, r0
 8001a06:	4642      	mov	r2, r8
 8001a08:	189b      	adds	r3, r3, r2
 8001a0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a0e:	464b      	mov	r3, r9
 8001a10:	460a      	mov	r2, r1
 8001a12:	eb42 0303 	adc.w	r3, r2, r3
 8001a16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001a1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001a24:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001a28:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	18db      	adds	r3, r3, r3
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a32:	4613      	mov	r3, r2
 8001a34:	eb42 0303 	adc.w	r3, r2, r3
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a3e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001a42:	f7fe fbdf 	bl	8000204 <__aeabi_uldivmod>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <LL_USART_SetBaudRate+0x238>)
 8001a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a50:	095b      	lsrs	r3, r3, #5
 8001a52:	2164      	movs	r1, #100	; 0x64
 8001a54:	fb01 f303 	mul.w	r3, r1, r3
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	3332      	adds	r3, #50	; 0x32
 8001a5e:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <LL_USART_SetBaudRate+0x238>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	095b      	lsrs	r3, r3, #5
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	4423      	add	r3, r4
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a78:	609a      	str	r2, [r3, #8]
}
 8001a7a:	e108      	b.n	8001c8e <LL_USART_SetBaudRate+0x44a>
 8001a7c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001a80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a84:	2200      	movs	r2, #0
 8001a86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a8a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001a8e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001a92:	4642      	mov	r2, r8
 8001a94:	464b      	mov	r3, r9
 8001a96:	1891      	adds	r1, r2, r2
 8001a98:	6239      	str	r1, [r7, #32]
 8001a9a:	415b      	adcs	r3, r3
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001aa2:	4641      	mov	r1, r8
 8001aa4:	1854      	adds	r4, r2, r1
 8001aa6:	4649      	mov	r1, r9
 8001aa8:	eb43 0501 	adc.w	r5, r3, r1
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	00eb      	lsls	r3, r5, #3
 8001ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aba:	00e2      	lsls	r2, r4, #3
 8001abc:	4614      	mov	r4, r2
 8001abe:	461d      	mov	r5, r3
 8001ac0:	4643      	mov	r3, r8
 8001ac2:	18e3      	adds	r3, r4, r3
 8001ac4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ac8:	464b      	mov	r3, r9
 8001aca:	eb45 0303 	adc.w	r3, r5, r3
 8001ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001ad2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001adc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001aec:	4629      	mov	r1, r5
 8001aee:	008b      	lsls	r3, r1, #2
 8001af0:	4621      	mov	r1, r4
 8001af2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001af6:	4621      	mov	r1, r4
 8001af8:	008a      	lsls	r2, r1, #2
 8001afa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001afe:	f7fe fb81 	bl	8000204 <__aeabi_uldivmod>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4b65      	ldr	r3, [pc, #404]	; (8001c9c <LL_USART_SetBaudRate+0x458>)
 8001b08:	fba3 2302 	umull	r2, r3, r3, r2
 8001b0c:	095b      	lsrs	r3, r3, #5
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	b29c      	uxth	r4, r3
 8001b14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001b22:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001b26:	4642      	mov	r2, r8
 8001b28:	464b      	mov	r3, r9
 8001b2a:	1891      	adds	r1, r2, r2
 8001b2c:	61b9      	str	r1, [r7, #24]
 8001b2e:	415b      	adcs	r3, r3
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b36:	4641      	mov	r1, r8
 8001b38:	1851      	adds	r1, r2, r1
 8001b3a:	6139      	str	r1, [r7, #16]
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	414b      	adcs	r3, r1
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b4e:	4659      	mov	r1, fp
 8001b50:	00cb      	lsls	r3, r1, #3
 8001b52:	4651      	mov	r1, sl
 8001b54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b58:	4651      	mov	r1, sl
 8001b5a:	00ca      	lsls	r2, r1, #3
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4603      	mov	r3, r0
 8001b62:	4642      	mov	r2, r8
 8001b64:	189b      	adds	r3, r3, r2
 8001b66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	eb42 0303 	adc.w	r3, r2, r3
 8001b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b80:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8001b90:	4649      	mov	r1, r9
 8001b92:	008b      	lsls	r3, r1, #2
 8001b94:	4641      	mov	r1, r8
 8001b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b9a:	4641      	mov	r1, r8
 8001b9c:	008a      	lsls	r2, r1, #2
 8001b9e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001ba2:	f7fe fb2f 	bl	8000204 <__aeabi_uldivmod>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4611      	mov	r1, r2
 8001bac:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <LL_USART_SetBaudRate+0x458>)
 8001bae:	fba3 2301 	umull	r2, r3, r3, r1
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2264      	movs	r2, #100	; 0x64
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	1acb      	subs	r3, r1, r3
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	3332      	adds	r3, #50	; 0x32
 8001bc0:	4a36      	ldr	r2, [pc, #216]	; (8001c9c <LL_USART_SetBaudRate+0x458>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4423      	add	r3, r4
 8001bd2:	b29c      	uxth	r4, r3
 8001bd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001bd8:	2200      	movs	r2, #0
 8001bda:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bdc:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001bde:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001be2:	4642      	mov	r2, r8
 8001be4:	464b      	mov	r3, r9
 8001be6:	1891      	adds	r1, r2, r2
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	415b      	adcs	r3, r3
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bf2:	4641      	mov	r1, r8
 8001bf4:	1851      	adds	r1, r2, r1
 8001bf6:	6039      	str	r1, [r7, #0]
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	414b      	adcs	r3, r1
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001c0a:	4659      	mov	r1, fp
 8001c0c:	00cb      	lsls	r3, r1, #3
 8001c0e:	4651      	mov	r1, sl
 8001c10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c14:	4651      	mov	r1, sl
 8001c16:	00ca      	lsls	r2, r1, #3
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4642      	mov	r2, r8
 8001c20:	189b      	adds	r3, r3, r2
 8001c22:	673b      	str	r3, [r7, #112]	; 0x70
 8001c24:	464b      	mov	r3, r9
 8001c26:	460a      	mov	r2, r1
 8001c28:	eb42 0303 	adc.w	r3, r2, r3
 8001c2c:	677b      	str	r3, [r7, #116]	; 0x74
 8001c2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001c32:	2200      	movs	r2, #0
 8001c34:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8001c44:	4649      	mov	r1, r9
 8001c46:	008b      	lsls	r3, r1, #2
 8001c48:	4641      	mov	r1, r8
 8001c4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c4e:	4641      	mov	r1, r8
 8001c50:	008a      	lsls	r2, r1, #2
 8001c52:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001c56:	f7fe fad5 	bl	8000204 <__aeabi_uldivmod>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <LL_USART_SetBaudRate+0x458>)
 8001c60:	fba3 1302 	umull	r1, r3, r3, r2
 8001c64:	095b      	lsrs	r3, r3, #5
 8001c66:	2164      	movs	r1, #100	; 0x64
 8001c68:	fb01 f303 	mul.w	r3, r1, r3
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	3332      	adds	r3, #50	; 0x32
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <LL_USART_SetBaudRate+0x458>)
 8001c74:	fba2 2303 	umull	r2, r3, r2, r3
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4423      	add	r3, r4
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c8c:	609a      	str	r2, [r3, #8]
}
 8001c8e:	bf00      	nop
 8001c90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001c94:	46bd      	mov	sp, r7
 8001c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c9a:	bf00      	nop
 8001c9c:	51eb851f 	.word	0x51eb851f

08001ca0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fd8c 	bl	80017d0 <LL_USART_IsEnabled>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d15e      	bne.n	8001d7c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001cc6:	f023 030c 	bic.w	r3, r3, #12
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	6851      	ldr	r1, [r2, #4]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	68d2      	ldr	r2, [r2, #12]
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	6912      	ldr	r2, [r2, #16]
 8001cd8:	4311      	orrs	r1, r2
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	6992      	ldr	r2, [r2, #24]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	4619      	mov	r1, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fd83 	bl	80017f8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fd90 	bl	800181e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fc6a 	bl	80015dc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <LL_USART_Init+0xe8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d102      	bne.n	8001d16 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	e021      	b.n	8001d5a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <LL_USART_Init+0xec>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d102      	bne.n	8001d24 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	e01a      	b.n	8001d5a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <LL_USART_Init+0xf0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d102      	bne.n	8001d32 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	e013      	b.n	8001d5a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <LL_USART_Init+0xf4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d102      	bne.n	8001d40 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	e00c      	b.n	8001d5a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <LL_USART_Init+0xf8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d102      	bne.n	8001d4e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	e005      	b.n	8001d5a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <LL_USART_Init+0xfc>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d101      	bne.n	8001d5a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00d      	beq.n	8001d7c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d009      	beq.n	8001d7c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	699a      	ldr	r2, [r3, #24]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	69b9      	ldr	r1, [r7, #24]
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff fd64 	bl	8001844 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001d7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40004400 	.word	0x40004400
 8001d90:	40004800 	.word	0x40004800
 8001d94:	40011400 	.word	0x40011400
 8001d98:	40004c00 	.word	0x40004c00
 8001d9c:	40005000 	.word	0x40005000

08001da0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <LL_InitTick+0x30>)
 8001db4:	3b01      	subs	r3, #1
 8001db6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <LL_InitTick+0x30>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <LL_InitTick+0x30>)
 8001dc0:	2205      	movs	r2, #5
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001ddc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ffdd 	bl	8001da0 <LL_InitTick>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <LL_SetSystemCoreClock+0x1c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000000 	.word	0x20000000

08001e10 <__libc_init_array>:
 8001e10:	b570      	push	{r4, r5, r6, lr}
 8001e12:	4d0d      	ldr	r5, [pc, #52]	; (8001e48 <__libc_init_array+0x38>)
 8001e14:	4c0d      	ldr	r4, [pc, #52]	; (8001e4c <__libc_init_array+0x3c>)
 8001e16:	1b64      	subs	r4, r4, r5
 8001e18:	10a4      	asrs	r4, r4, #2
 8001e1a:	2600      	movs	r6, #0
 8001e1c:	42a6      	cmp	r6, r4
 8001e1e:	d109      	bne.n	8001e34 <__libc_init_array+0x24>
 8001e20:	4d0b      	ldr	r5, [pc, #44]	; (8001e50 <__libc_init_array+0x40>)
 8001e22:	4c0c      	ldr	r4, [pc, #48]	; (8001e54 <__libc_init_array+0x44>)
 8001e24:	f000 f818 	bl	8001e58 <_init>
 8001e28:	1b64      	subs	r4, r4, r5
 8001e2a:	10a4      	asrs	r4, r4, #2
 8001e2c:	2600      	movs	r6, #0
 8001e2e:	42a6      	cmp	r6, r4
 8001e30:	d105      	bne.n	8001e3e <__libc_init_array+0x2e>
 8001e32:	bd70      	pop	{r4, r5, r6, pc}
 8001e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e38:	4798      	blx	r3
 8001e3a:	3601      	adds	r6, #1
 8001e3c:	e7ee      	b.n	8001e1c <__libc_init_array+0xc>
 8001e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e42:	4798      	blx	r3
 8001e44:	3601      	adds	r6, #1
 8001e46:	e7f2      	b.n	8001e2e <__libc_init_array+0x1e>
 8001e48:	08001ea0 	.word	0x08001ea0
 8001e4c:	08001ea0 	.word	0x08001ea0
 8001e50:	08001ea0 	.word	0x08001ea0
 8001e54:	08001ea4 	.word	0x08001ea4

08001e58 <_init>:
 8001e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5a:	bf00      	nop
 8001e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e5e:	bc08      	pop	{r3}
 8001e60:	469e      	mov	lr, r3
 8001e62:	4770      	bx	lr

08001e64 <_fini>:
 8001e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e66:	bf00      	nop
 8001e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e6a:	bc08      	pop	{r3}
 8001e6c:	469e      	mov	lr, r3
 8001e6e:	4770      	bx	lr
